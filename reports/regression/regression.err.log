Traceback (most recent call last):
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/media/colin/Shared/colin/git/materials-ml-workshop/env/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Ridge 

def generate_X(n_data):
    return np.array([
        np.random.uniform(0,10,n_data)*(10**(-n))
        for n in range(40)
    ]).T

def generate_y(X, noise=0.5):
    return np.array([
        np.sum([ 2e-4*(10**n)*x_n for n,x_n in enumerate(x) ]) + \
            10*np.random.normal(0,noise)
        for x in X
    ])

# generate training set:
X_train = generate_X(42)
y_train = generate_y(X_train, noise=0.5)


# generate validation set:
X_validation = generate_X(20)
y_validation = generate_y(X_validation, noise=0.0)

# normalize training and validation sets:
scaler = StandardScaler()
scaler.fit(X_train)
Z_train = scaler.transform(X_train)
Z_validation = scaler.transform(X_validation)

lambda_values = np.linspace(0,1.0, 100)

train_mse_values = []
validation_mse_values = []

for lambda_reg in lambda_values:
    ridge_model = Ridge(alpha=lambda_reg)
    ridge_model.fit(Z_train, y_train)
    

    # make prediction and evaluate training set error:
    yhat_train = ridge_model.predict(Z_train)
    mse_train = np.mean((yhat_train - y_train)**2)

    # make predictions and evaluate validation set error:
    yhat_validation = ridge_model.predict(Z_validation)
    mse_validation = np.mean((yhat_validation - y_validation)**2)
    
    # record results:
    train_mse_values.append(mse_train)
    validation_mse_values.append(mse_validation)

# plot ridge regression results:
plt.figure()
plt.plot(lambda_values, train_mse_values, label='Training Set)
plt.plot(lambda_values, validation_mse_values, label='Validation Set')
plt.ylabel('Mean Square Error (MSE)')
plt.xlabel(r'Regularization ($\lambda$)')
plt.legend()
plt.show()
------------------


[0;36m  Cell [0;32mIn[4], line 57[0;36m[0m
[0;31m    plt.plot(lambda_values, train_mse_values, label='Training Set)[0m
[0m                                                    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m unterminated string literal (detected at line 57)


